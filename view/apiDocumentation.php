<div class="col-sm-12">
    <div class="well bs-component">
        <h1>API Documentation:</h1>
        API Functionality is provided through an <strong>RESTful</strong> HTTP Interface. This
        API-Documentation
        describes how this Interface can be used. Therefore each Functionality Documentation consists of four
        Parts.
        <ul>
            <li>URL</li>
            <li>Needed Rights</li>
            <li>Request Format</li>
            <li>Reply Format</li>
        </ul>
        The Request/Reply Contend is always <strong>JSON</strong> encoded. Therefore this Documentation provides
        the corresponding JSON-Schemes. For the most Cases there is also Example provided.
        <br/>
        If your Request is processed correctly the Reply is usually using the <code>200 OK</code>
        HTTP-Statuscode.
        Otherwise this Documentation mentions the used Statuscodes. The same applies to failing requests, where
        the standard Statuscode is <code>400 Bad Request</code>, if the Documentation mentions nothing else.
        <br/>
        The most Functionality is restricted to Authenticated Requests (See below).

        <h2>API URL:</h2>
        The API is located directly under http://www.arcwind.de/

        <h2>Version:</h2>
        The API Version is accessible via <code>GET</code>.

        <h4>URL:</h4>
<pre>
/api/version
</pre>
        <h4>Access-Control:</h4>
<pre>
public
</pre>
        <h4>Request-Scheme:</h4>
<pre>
<em class="text-muted">empty</em>
</pre>
        <h4>Reply-Scheme:</h4>
<pre>
{
	"type" : "object",
	"properties" : {
			"version": { "type": "string" },
		}
}
</pre>
        <div class="bs-callout bs-callout-info">
            <strong>Example - Reply:</strong>
            <br/>
            &nbsp;
<pre>
{
    "version": "0.1"
}
</pre>
        </div>
        <hr/>

        <h2>Authentication:</h2>

        the most Requests require to be Authenticated.
        The Authentication is done via a HTTP Request Header, which provides an valid Access Token:

        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Header Field Name</th>
                <th>Value</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Auth-Token</td>
                <td><em class="text-muted">Token</em></td>
            </tr>
            </tbody>
        </table>

        The Token can be generated by each user with fine-granular control over the rights the Token should have and
        the Lifetime the Token should have.


        Each API Token comes with rights. This Documentation notes for every API Call which rights are
        needed.
        If the API mentions <em>public</em> as Needed Rights, there is no need for the Auth-Token Header field at
        all.

        <div class="alert alert-dismissable alert-warning">
            <h4>Warning!</h4>

            <p>All API Calls which require an valid Token, may lead to get your IP (temporally)
                <strong>banned</strong> from any further API Calls, when your <strong>Token is invalid</strong> or
                you are issuing <strong>too much Calls</strong> per Time.</p>
        </div>

        <hr/>


        <h2>CORS:</h2>

        JS XMLHttpRequest are usually Limited through the Same-Origin-Policy (SOP).
        Therefore this API supports Cross-Origin Resource Sharing (CORS).
        <br/>
        So API Calls respond some CORS related http Headers.

        <br/><br/>
        <h4><strong>Every</strong> http Reply contains the following Headers:</h4>

<pre>
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: x-requested-with, Content-Type
</pre>
        <br/>
        <h4>Additional Headers</h4>
        If your request was <strong>NOT</strong> an <code>OPTIONS</code> Request-Method,
        the API Replies your <code>x-requested-with</code> Header.<br/>&nbsp;

<pre>
x-requested-with: <em class="text-muted">x-requested-with Content from your last Request.</em>
</pre>
        <br/>
        <h4>HTTP OPTIONS Request-Method</h4>

        For some Request-Methods CORS needs preflight Requests/Replies. Therefore the API answers the
        <code>OPTIONS</code>
        Request-Methods with the following additional Header.
<pre>
Access-Control-Allow-Methods: GET, POST, PUT, DELETE
</pre>

        <strong>Every</strong> <code>OPTIONS</code> Request returns an empty Reply Body.


        <hr/>

        <br/><br/>&nbsp;

        <hr/>

        Check if the timestamp is bigger than 1400000000000

        Checksum calculation.

        <br/><br/>&nbsp;

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">JSON-Schema für einen neuen Wert</h3>
            </div>
            <div class="panel-body">
                    <pre>{
    "type": "object",
    "properties": {
        "time": {"type": "string"},
        "value": {"type": "string"},
        "checksum": {"type": "string"}
    },
    "additionalProperties": false
}</pre>
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">JSON-Schema für eine Liste an neue Werten</h3>
            </div>
            <div class="panel-body">
                    <pre>{
"type": "array",
"items": {
    "type": "object",
    "properties": {
        "time": {"type": "string"},
        "value": {"type": "string"},
        "checksum": {"type": "string"}
    },
    "additionalProperties": false
    },
"minItems": 1
}</pre>
            </div>
        </div>

    </div>

</div>